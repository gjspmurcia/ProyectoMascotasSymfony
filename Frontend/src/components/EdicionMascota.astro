---
import Modal from './Modal.astro';
const { mascotaId } = Astro.props;
const PUBLIC_API_URL = import.meta.env.PUBLIC_API_URL;
---

<div>
  <h1 class="text-3xl font-bold text-center mt-10">Editar mascota</h1>
  <h2 class="text-xl text-center mt-4">Introduce los datos correspondientes:</h2>
  <form
    id="formEdicionMascota"
    method="POST"
    action=`${import.meta.env.PUBLIC_API_URL}/api/mi_mascota_editar`
    enctype="multipart/form-data"
    class="w-full max-w-xl mx-auto m-4 p-4 rounded shadow-lg border-2 border-gray-300"
  >
    <div class="mb-4">
      <label for="nombre">Nombre:</label>
      <input type="text" id="nombre" name="nombre" required />
    </div>
    <div class="mb-4">
      <label for="num_chip">Nº Chip:</label>
      <input type="text" id="num_chip" name="num_chip" />
    </div>
    <div class="mb-4">
      <label for="observaciones">Observaciones:</label>
      <input type="text" id="observaciones" name="observaciones" />
    </div>
    <div class="mb-4">
      <label for="foto">Foto:</label>
      <input 
        type="file" 
        id="foto" 
        name="foto" 
        accept="image/*"
        class="w-full border p-2 rounded" 
      />
      <p class="text-sm text-gray-500 mt-1">Formatos aceptados: JPG, PNG, GIF (máx. 5MB)</p>
    </div>
    <button
      type="submit"
      class="bg-teal-600 hover:bg-teal-800 text-white font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline"
      >Finalizar Edición</button
    >
    <a class="bg-amber-600 hover:bg-amber-800 text-white font-bold py-2 px-6 rounded focus:outline-none focus:shadow-outline" href="javascript:history.back()">Volver</a>
    <p id="mensaje"></p>
  </form>

</div>

<Modal title='Aviso:' />
<script define:vars={{ mascotaId, PUBLIC_API_URL }}>
  document.addEventListener("DOMContentLoaded", async () => {
    const formMascota = document.getElementById("formEdicionMascota");
    const mensaje = document.getElementById("mensaje");
    
  
    
    if (!mascotaId) {
      mensaje.textContent = "Error: ID de mascota no proporcionado";
      mensaje.classList.add("text-red-500");
      return;
    }
    
    // Cargar datos existentes de la mascota
    try {
      console.log("Cargando datos de la mascota con ID:", mascotaId);
      const response = await fetch(`${PUBLIC_API_URL}/api/mi_mascota`, {
        credentials: "include"
      });
      
      const data = await response.json();


   
      if (response.ok && data.status === "success") {

        const mascota = Array.isArray(data.mascota) 
          ? data.mascota.find(m => m.id.toString() === mascotaId.toString())
          : null;
        
        if (!mascota) {
          mensaje.textContent = `Error: No se encontró la mascota con ID ${mascotaId}`;
          mensaje.classList.add("text-red-500");
          return;
        }
        // Rellenar el formulario con datos existentes
        
        console.log("Datos de la mascota:", mascota);
        document.getElementById('nombre').value = mascota.nombre || '';
        document.getElementById('num_chip').value = mascota.num_chip || '';
        document.getElementById('observaciones').value = mascota.observaciones || '';
        
        // Mostrar imagen actual si existe
        if (mascota.foto) {
          const previewContainer = document.querySelector('div.mt-2');
          const img = document.createElement('img');
          img.src = `${PUBLIC_API_URL}/uploads/mascotas/${mascota.foto}`;
          img.className = 'w-32 h-32 object-cover rounded';
          previewContainer.innerHTML = '';
          previewContainer.appendChild(img);
        }
      } else {
        mensaje.textContent = `Error: ${data.mensaje || "No se pudo cargar la mascota"}`;
        mensaje.classList.add("text-red-500");
      }
    } catch (error) {
      mensaje.textContent = "Error de red al cargar los datos";
      mensaje.classList.add("text-red-500");
    }

    // Cambiar el evento submit para editar en lugar de crear
    formMascota.addEventListener("submit", async (event) => {
      event.preventDefault(); // Evita la recarga de la página
      
      if (!mensaje) {
        console.error("No se encontró el elemento mensaje");
        return;
      }
      
      mensaje.textContent = "";
      mensaje.classList.remove("text-red-500", "text-green-500");

      const formMascotaUpdated = document.getElementById("formEdicionMascota");
      let formData = new FormData(formMascotaUpdated);
      formData.append('id', mascotaId);


      for (let [key, value] of formData.entries()) {
  console.log(key, value);
}


      if(formData == null){console.log("formData es null")}
      
      try {
        const response = await fetch(
          `${PUBLIC_API_URL}/api/mi_mascota_editar/${mascotaId}`,
          {
            method: "POST", 
            credentials: "include",
            body: formData,
          }
        );

        const responseData = await response.json();

        if (response.ok) {
          mensaje.textContent = "Editado con exito";
          mensaje.classList.remove("text-red-500");
          mensaje.classList.add("text-green-500");
          console.log("Editado exitoso:", responseData);
          window.showModal({
            message: "Mascota editada correctamente",
            onConfirm: () => {
              window.location.href = "/mis-mascotas";
            }
          });
          
        } else {
          console.error("Error en el registro:", responseData);
          if (responseData.mensaje && Array.isArray(responseData.mensaje)) {
            let errorText = "";
            responseData.mensaje.forEach((error) => {
              errorText += `${error.campo}: ${error.error}\n`;
            });
            mensaje.textContent = `Error: ${errorText}`;
          } else {
            mensaje.textContent = `Error desconocido: ${responseData.mensaje || "Error desconocido"}`;
          }
          mensaje.classList.remove("text-green-500");
          mensaje.classList.add("text-red-500");
        }
      } catch (error) {
        mensaje.textContent = "Error de red. Inténtalo de nuevo más tarde.";
        mensaje.classList.remove("text-green-500");
        mensaje.classList.add("text-red-500");
        console.error("Error de red:", error);
      }
    });
  });

  // Vista previa de la imagen subida
  const fotoInput = document.getElementById('foto');
  const previewContainer = document.createElement('div');
  previewContainer.className = 'mt-2';
  
  fotoInput?.parentNode?.appendChild(previewContainer);
  
  fotoInput?.addEventListener('change', (e) => {
    const file = (e.target).files?.[0];
    previewContainer.innerHTML = '';
    
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const img = document.createElement('img');
        img.src = e.target?.result;
        img.className = 'w-32 h-32 object-cover rounded';
        previewContainer.appendChild(img);
      };
      reader.readAsDataURL(file);
    }
  });
</script>

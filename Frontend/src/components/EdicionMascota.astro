---
import Modal from './Modal.astro';
const { mascotaId } = Astro.props;
const PUBLIC_API_URL = import.meta.env.PUBLIC_API_URL;
---

<div class="min-h-3/5 flex items-center p-12 bg-gradient-to-br from-[#ac63d377] to-[#e5d04bad] via-[#6cb4d177] via-at-29% via-[#71e8a376] via-at-68%">
  <div class="w-full max-w-3xl mx-auto">
    <h1 class="text-3xl text-center font-extrabold text-primary sm:text-4xl sm:tracking-tight mb-2">Editar mascota</h1>
    <h2 class="text-center text-gray-700 text-md md:text-xl mb-6">Edita la información de tu mascota y mantén todos sus datos actualizados</h2>
  
    <form
      id="formEdicionMascota"
      method="POST"
      action=`${import.meta.env.PUBLIC_API_URL}/api/mi_mascota_editar`
      enctype="multipart/form-data"
      class="bg-white text-gray-700 flex flex-col gap-4 w-full mx-auto p-8 rounded-xl shadow-xl hover:shadow-lg/40 border border-gray-300">
      
      <div>
        <label for="nombre">Nombre<span class="font-light text-red-600">*</span>:</label>
        <input type="text" id="nombre" name="nombre" required />
      </div>

      <div>
        <label for="num_chip">Nº Chip:</label>
        <input type="text" id="num_chip" name="num_chip" />
      </div>

      <div>
        <label for="observaciones">Observaciones:</label>
        <input type="text" id="observaciones" name="observaciones" />
      </div>

      <div>
        <label for="foto">Foto:</label>
        <input 
          type="file" 
          id="foto" 
          name="foto" 
          accept="image/*"
          class="w-full border p-2 rounded" 
        />
        <p class="text-sm text-gray-500 mt-1">Formatos aceptados: JPG, PNG, GIF, WEBP (máx. 5MB)</p>
      </div>

      <div class="flex flex-col sm:flex-row gap-2 mt-4">
        <button type="submit" class="grow transition duration-300">Guardar cambios</button>
        <button id="botonVolver" class="warning grow transition duration-300">Volver</button>
      </div>

      <p id="mensaje"></p>
    </form>
  </div>
</div>

<Modal title='Aviso:' />
<script define:vars={{ mascotaId, PUBLIC_API_URL }}>
  document.addEventListener("DOMContentLoaded", async () => {
    const formMascota = document.getElementById("formEdicionMascota");
    const mensaje = document.getElementById("mensaje");
    
    if (!mascotaId) {
      mensaje.textContent = "Error: ID de mascota no proporcionado";
      mensaje.classList.add("text-red-500");
      return;
    }
    
    // Cargar datos existentes de la mascota
    try {
      console.log("Cargando datos de la mascota con ID:", mascotaId);
      const response = await fetch(`${PUBLIC_API_URL}/api/mi_mascota`, {
        credentials: "include"
      });
      
      const data = await response.json();

      if (response.ok && data.status === "success") {
        const mascota = Array.isArray(data.mascota) 
          ? data.mascota.find(m => m.id.toString() === mascotaId.toString())
          : null;
        
        if (!mascota) {
          mensaje.textContent = `Error: No se encontró la mascota con ID ${mascotaId}`;
          mensaje.classList.add("text-red-500");
          return;
        }
        // Rellenar el formulario con datos existentes
        
        console.log("Datos de la mascota:", mascota);
        document.getElementById('nombre').value = mascota.nombre || '';
        document.getElementById('num_chip').value = mascota.num_chip || '';
        document.getElementById('observaciones').value = mascota.observaciones || '';
        
        // Mostrar imagen actual si existe
        if (mascota.foto) {
          const previewContainer = document.querySelector('div.mt-2');
          const img = document.createElement('img');
          img.src = `${PUBLIC_API_URL}/uploads/mascotas/${mascota.foto}`;
          img.className = 'w-32 h-32 object-cover rounded';
          previewContainer.innerHTML = '';
          previewContainer.appendChild(img);
        }
      } else {
        mensaje.textContent = `Error: ${data.mensaje || "No se pudo cargar la mascota"}`;
        mensaje.classList.add("text-red-500");
      }
    } catch (error) {
      mensaje.textContent = "Error de red al cargar los datos";
      mensaje.classList.add("text-red-500");
    }

    // Cambiar el evento submit para editar en lugar de crear
    formMascota.addEventListener("submit", async (event) => {
      event.preventDefault(); // Evita la recarga de la página
      
      if (!mensaje) {
        console.error("No se encontró el elemento mensaje");
        return;
      }
      
      mensaje.textContent = "";
      mensaje.classList.remove("text-red-500", "text-green-500");

      const formMascotaUpdated = document.getElementById("formEdicionMascota");
      let formData = new FormData(formMascotaUpdated);
      formData.append('id', mascotaId);

      for (let [key, value] of formData.entries()) {
        console.log(key, value);
      }

      if (formData == null) {
        console.log("formData es null")
      }
      
      try {
        const response = await fetch(`${PUBLIC_API_URL}/api/mi_mascota_editar/${mascotaId}`, {
          method: "POST", 
          credentials: "include",
          body: formData,
        });

        const responseData = await response.json();

        if (response.ok) {
          mensaje.textContent = "Editado con exito";
          mensaje.classList.remove("text-red-500");
          mensaje.classList.add("text-green-500");
          console.log("Editado exitoso:", responseData);
          window.showModal({
            message: "Mascota editada correctamente",
            onConfirm: () => {
              window.location.href = "/mis-mascotas";
            }
          });
        } else {
          console.error("Error en el registro:", responseData);
          if (responseData.mensaje && Array.isArray(responseData.mensaje)) {
            let errorText = "";
            responseData.mensaje.forEach((error) => {
              errorText += `${error.campo}: ${error.error}\n`;
            });
            mensaje.textContent = `Error: ${errorText}`;
          } else {
            mensaje.textContent = `Error desconocido: ${responseData.mensaje || "Error desconocido"}`;
          }
          mensaje.classList.remove("text-green-500");
          mensaje.classList.add("text-red-500");
        }
      } catch (error) {
        mensaje.textContent = "Error de red. Inténtalo de nuevo más tarde.";
        mensaje.classList.remove("text-green-500");
        mensaje.classList.add("text-red-500");
        console.error("Error de red:", error);
      }
    });
  });

  // Vista previa de la imagen subida
  const fotoInput = document.getElementById('foto');
  const previewContainer = document.createElement('div');
  previewContainer.className = 'mt-2';
  
  fotoInput?.parentNode?.appendChild(previewContainer);
  
  fotoInput?.addEventListener('change', (e) => {
    const file = (e.target).files?.[0];
    previewContainer.innerHTML = '';
    
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const img = document.createElement('img');
        img.src = e.target?.result;
        img.className = 'w-32 h-32 object-cover rounded';
        previewContainer.appendChild(img);
      };
      reader.readAsDataURL(file);
    }
  });

  document.getElementById("botonVolver").addEventListener("click", () => {
    window.location.href = 'javascript:history.back()'; 
  });
</script>
---
import Modal from './Modal.astro';
---

<div class="min-h-3/5  bg-gradient-to-br from-[#ac63d377] to-[#e5d04bad] via-[#6cb4d177] via-at-29% via-[#71e8a376] via-at-68%">
    <div id="profile-container" class="p-2 text-center rounded">
      Cargando datos...
    </div>
  </div>
  
  <Modal title='Aviso:' />
  <script>
    // 1. Obtener el elemento contenedor en el DOM
    const profileContainer: HTMLElement | null = document.getElementById('profile-container');


    // 2. Función asíncrona para obtener los datos
    async function fetchUserProfile() {
      try {
        const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/mi_perfil`, {
          method: "GET",
          credentials: "include",
          headers: {
              'Accept': 'application/json',
          }
        });
        const data = await response.json();
  
        // 4. Verificar el estado de la respuesta y el status de la API
        if (response.ok && data.status === "success") {
           const usuario = data.usuario;
           console.log("Datos de usuario cargados:", usuario);
  
           // 5. Si es exitoso, construir e inyectar el HTML con los datos
           if (profileContainer) {
           profileContainer.innerHTML = `
             <section class="pt-8 md:pt-12 pb-16">
               <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                
                 <div class="text-center mb-12">
                   <h1 class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl">
                     Mi Perfil
                   </h1>
                   <p class="mt-3 text-base text-gray-500 sm:mt-5 sm:text-xl">
                     Gestiona tu información personal y configuración de cuenta
                   </p>
                 </div>

                 <div class="bg-white rounded-xl shadow-lg/20 border border-gray-100 overflow-hidden">
                   

                   <div class="px-12 py-4 text-left">
                     <div class="flex flex-col lg:flex-row lg:gap-8">
                       <div class="flex-1 lg:flex-[2]">
                        
                      <div class="bg-gradient-to-br from-primary/10 to-secondary/10  py-4">
                        <div class="flex items-center">
                          <div class="flex items-center justify-center w-14 h-14 bg-primary rounded-full">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                          </div>
                          <div class="ml-6">
                            <h2 class="text-2xl font-bold text-gray-900 text-left">${usuario.nombre}</h2>
                              <p class="text-gray-600 text-left">${usuario.email}</p>
                          </div>
                        </div>
                      </div>
                        
                          
                             <p class="text-lg font-medium text-gray-700 mb-2">Dni:<span class="px-3 py-2 text-teal-700">
                               ${usuario.dni || 'No especificado'}
                             </span></p>

                             <p class="text-lg font-medium text-gray-700 mb-2">Teléfono:<span class="px-3 py-2 text-teal-700">
                               ${usuario.telefono || 'No especificado'}
                             </span></p>

                             <p class="text-lg font-medium text-gray-700 mb-2">Dirección:<span class="px-3 py-2 text-teal-700">
                                ${usuario.calle || 'No especificado'}, ${usuario.num_calle || ''}
                             </span></p>

                             <p class="text-lg font-medium text-gray-700 mb-2">Código postal:<span class="px-3 py-2 text-teal-700">
                                ${usuario.cod_postal || 'No especificado'}
                             </span></p>
                             <p class="text-lg font-medium text-gray-700 mb-2">Ciudad:<span class="px-3 py-2 text-teal-700">
                                ${usuario.ciudad || 'No especificado'} 
                             </span></p>                             

                       </div>

  
                       <div class="mt-8 lg:mt-12 lg:flex-1">
                         <div class="space-y-4">
                           <button id="botonEditarUsuario" 
                                   class="w-full inline-flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary-dark transition-all duration-300 transform hover:scale-105">
                             <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                             </svg>
                             Editar Perfil
                           </button>
                           
                           <button id="botonCambiarPassword" 
                                   class="w-full inline-flex items-center justify-center px-4 py-3 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 transition-all duration-300 transform hover:scale-105">
                             <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 20 24" stroke="currentColor">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 8A5 5 0 005 8v1H3a2 2 0 00-2 2v8a2 2 0 002 2h14a2 2 0 002-2v-8a2 2 0 00-2-2h-2V8zM8 8a2 2 0 114 0v1h-4V8z" />
                             </svg>
                             Cambiar Contraseña
                           </button>
                           
                           <button id="botonLogout" 
                                   class="w-full inline-flex items-center justify-center px-4 py-3 border border-yellow-300 text-sm font-medium rounded-md text-yellow-700 bg-yellow-50 hover:bg-yellow-100 transition-all duration-300 transform hover:scale-105">
                             <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                             </svg>
                             Cerrar Sesión
                           </button>
                           
                           <button id="botonEliminarUsuario" 
                                   class="w-full inline-flex items-center justify-center px-4 py-3 border border-transparent text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 transition-all duration-300 transform hover:scale-105">
                             <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                             </svg>
                             Eliminar Cuenta
                           </button>
                         </div>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>
             </section>
           `;
           const botonEliminarUsuario = document.getElementById('botonEliminarUsuario');
           const botonEditarUsuario = document.getElementById('botonEditarUsuario');
           const botonCambiarPassword = document.getElementById('botonCambiarPassword');
           const botonLogout = document.getElementById('botonLogout');

           botonEliminarUsuario?.addEventListener('click', () => eliminarUsuario(usuario.id));
           botonEditarUsuario?.addEventListener('click', () => {  window.location.href = `/editar-usuario/${usuario.id}`; });
           botonCambiarPassword?.addEventListener('click', () => {  window.location.href = `/cambiar-password/${usuario.id}`; });
           botonLogout?.addEventListener('click', () => {  window.location.href = `/logout`; });
          }
        } else {

          // Si no hay usuario autenticado
          if (response.status === 401) {
            profileContainer.innerHTML = `<p>El usuario no esta autenticado (Status: ${response.status})</p>`;
          } else {
          //  Si hay un error de la API 
          const mensajeError = data.message || `Error desconocido de la API (Status: ${response.status})`;
          console.error("Datos recibidos:", data); 
          profileContainer.textContent = `Error: ${mensajeError}`;}
        }
      } catch (error) {
        // 7. Si hay un error de red o cualquier otra excepción durante el fetch
        console.error("Error de red durante el fetch:", error);
        profileContainer.textContent = "Error de red al conectar con la API.";
      }
    }
  
    // 8. Llamar a la función para iniciar la carga de datos cuando el script se ejecuta
    fetchUserProfile();
  
    async function eliminarUsuario(id) {
      
      window.showModal({
          message: "¿Estás seguro de que deseas eliminar tu cuenta? Esta acción no se puede deshacer.",
          onConfirm: async () => {
              try {
                const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/mi_perfil_eliminar/${id}`, {
                  method: 'DELETE',
                  credentials: 'include',
                  headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                  }
              });
            
            const data = await response.json();

            if (response.ok && data.status === "success") {
              window.showModal({
                message: "Usuario eliminado correctamente",
                onConfirm: () => {
                  window.location.href = "/";
                }
              });
            } else {
              window.showModal({
                message: `Error al eliminar el usuario: ${data.mensaje || 'Error desconocido'}`,
                onConfirm: () => {
                  window.location.href = "/mi-perfil";
                }
              });
            }
          } catch (error) {
            console.error("Error al eliminar el usuario:", error);
            window.showModal({
                message: "Error de conexión al intentar eliminar el usuario",
                onConfirm: () => {
                  window.location.href = "/mi-perfil";
                }
            });
          }
        }
      });
    }

    function logout() {
      fetch(`${import.meta.env.PUBLIC_API_URL}/api/logout`, {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
        },
      })
      .then(response => {
        if (response.ok) {
          window.location.href = '/login'; 
        } else {
          console.error('Error al cerrar sesión');
        }
      })
      .catch(error => {
        console.error('Error de red:', error);
      });
    }
  </script>


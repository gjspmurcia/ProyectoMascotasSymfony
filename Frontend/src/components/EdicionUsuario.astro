---
import Modal from './Modal.astro';
const { usuarioId } = Astro.props;
const PUBLIC_API_URL = import.meta.env.PUBLIC_API_URL;
---

<div class="min-h-3/5 flex items-center p-12 bg-gradient-to-br from-[#ac63d377] to-[#e5d04bad] via-[#6cb4d177] via-at-29% via-[#71e8a376] via-at-68%">
  <div class="w-full max-w-3xl mx-auto">
    <h1 class="text-3xl text-center font-extrabold text-primary sm:text-4xl sm:tracking-tight mb-2">Editar perfil</h1>
    <h2 class="text-center text-gray-700 text-md md:text-xl mb-6">Edita tu información y mantén todos tus datos actualizados</h2>

    <form
      id="formEdicionUsuario"
      method="POST"
      class="bg-white flex flex-col gap-4 w-full mx-auto p-8 rounded-xl shadow-xl hover:shadow-lg/40 border border-gray-300">

      <div>
        <label for="nombre">Nombre:</label>
        <input type="text" id="nombre" name="nombre" required class="w-full mt-1 p-2 border rounded-md" />
      </div>

      <div>
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required class="w-full mt-1 p-2 border rounded-md" />
      </div>

      <div class="flex flex-col md:flex-row gap-4">
        <div class="w-full">
          <label for="dni">DNI:</label>
          <input type="text" id="dni" name="dni" required class="w-full mt-1 p-2 border rounded-md" />
        </div>
        <div class="w-full">
          <label for="telefono">Teléfono:</label>
          <input type="text" id="telefono" name="telefono" required class="w-full mt-1 p-2 border rounded-md" />
        </div>
      </div>

      <div class="flex flex-col md:flex-row gap-4">
        <div class="w-full">
          <label for="calle">Calle:</label>
          <input type="text" id="calle" name="calle" required class="w-full mt-1 p-2 border rounded-md" />
        </div>
        <div class="w-full">
          <label for="numero">Número:</label>
          <input type="number" min="0" id="numero" name="num_calle" required class="w-full mt-1 p-2 border rounded-md" />
        </div>
      </div>

      <div class="flex flex-col md:flex-row gap-4">
        <div class="w-full">
          <label for="codigo_postal">Código Postal:</label>
          <input type="number" min="0" id="codigo_postal" name="cod_postal" required class="w-full mt-1 p-2 border rounded-md" />
        </div>
        <div class="w-full">
          <label for="ciudad">Ciudad:</label>
          <input type="text" id="ciudad" name="ciudad" required class="w-full mt-1 p-2 border rounded-md" />
        </div>
      </div>

      <div class="flex flex-col md:flex-row gap-4 mt-4">
        <button type="submit" class="transition duration-300">Guardar cambios</button>
        <button id="botonVolver" class="warning transition duration-300">Volver</button>
      </div>

      <p id="mensaje"></p>

    </form>
  </div>
</div>

<Modal title='Aviso:' />

<script define:vars={{ usuarioId, PUBLIC_API_URL }}>
  document.addEventListener("DOMContentLoaded", async () => {
    const formUsuario = document.getElementById("formEdicionUsuario");
    const mensaje = document.getElementById("mensaje");

    if (!usuarioId) {
      mensaje.textContent = "Error: ID de usuario no proporcionado";
      mensaje.classList.add("text-red-500");
      return;
    }

    // Cargar datos existentes del usuario
    try {
      console.log("Cargando datos del usuario con ID:", usuarioId);
      const response = await fetch(`${PUBLIC_API_URL}/api/mi_perfil`, {
        credentials: "include",
      });

      const data = await response.json();

      if (response.ok && data.status === "success") {
        const usuario = data.usuario;

        if (!usuario) {
          mensaje.textContent = `Error: No se encontró el usuario con ID ${usuarioId}`;
          mensaje.classList.add("text-red-500");
          return;
        }
        // Rellenar el formulario con datos existentes

        console.log("Datos del usuario:", usuario);
        document.getElementById("nombre").value = usuario.nombre || "";
        document.getElementById("email").value = usuario.email || "";
        document.getElementById("dni").value = usuario.dni || "";
        document.getElementById("telefono").value = usuario.telefono || "";
        document.getElementById("calle").value = usuario.calle || "";
        document.getElementById("numero").value = usuario.num_calle || "";
        document.getElementById("codigo_postal").value = usuario.cod_postal || "";
        document.getElementById("ciudad").value = usuario.ciudad || "";
      } else {
        mensaje.textContent = `Error: ${data.mensaje || "No se pudo cargar el usuario"}`;
        mensaje.classList.add("text-red-500");
      }
    } catch (error) {
      mensaje.textContent = "Error de red al cargar los datos";
      mensaje.classList.add("text-red-500");
    }

    // Enviar datos en formato JSON al editar
    formUsuario.addEventListener("submit", async (event) => {
      event.preventDefault();
      mensaje.textContent = "";
      mensaje.classList.remove("text-red-500", "text-green-500");

      // Recolectar datos del formulario en un objeto
      const datosUsuario = {
        nombre: document.getElementById("nombre").value,
        email: document.getElementById("email").value,
        dni: document.getElementById("dni").value,
        telefono: document.getElementById("telefono").value,
        calle: document.getElementById("calle").value,
        num_calle: document.getElementById("numero").value,
        cod_postal: document.getElementById("codigo_postal").value,
        ciudad: document.getElementById("ciudad").value,
        id: usuarioId,
      };

      try {
        const response = await fetch(`${PUBLIC_API_URL}/api/mi_perfil_editar/${usuarioId}`, {
          method: "POST",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: JSON.stringify(datosUsuario),
        });

        const responseData = await response.json();

        if (response.ok) {
          mensaje.textContent = "Editado con éxito";
          mensaje.classList.remove("text-red-500");
          mensaje.classList.add("text-green-500");
          window.showModal({
            message: "Usuario actualizado correctamente",
            onConfirm: () => {
              window.location.href = "/mi-perfil";
            }
          });
        } else {
          if (responseData.errores && Array.isArray(responseData.errores)) {
            const erroresTexto = responseData.errores
              .map((e) => `${e.campo}: ${e.error}`)
              .join("\n");
            mensaje.textContent = `Error: ${erroresTexto}`;
          } else {
            mensaje.textContent = `Error: ${responseData.mensaje || "Error desconocido"}`;
          }
          mensaje.classList.add("text-red-500");
        }
      } catch (error) {
        mensaje.textContent = "Error de red. Inténtalo de nuevo más tarde.";
        mensaje.classList.remove("text-green-500");
        mensaje.classList.add("text-red-500");
        console.error("Error de red:", error);
      }
    });
  });

  document.getElementById("botonVolver").addEventListener("click", () => {
    window.location.href = '/mi-perfil'; 
  });
</script>
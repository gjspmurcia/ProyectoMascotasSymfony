---
import Modal from './Modal.astro';
---

<section class="pt-8 md:pt-12 pb-16 min-h-3/5  bg-gradient-to-br from-[#ac63d377] to-[#e5d04bad] via-[#6cb4d177] via-at-29% via-[#71e8a376] via-at-68%">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Header Section -->
    <div class="text-center mb-12">
      <h1 class="text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl">
        Mis Mascotas
      </h1>
      <p class="mt-3 text-base text-gray-500 sm:mt-5 sm:text-xl">
        Gestiona los perfiles de tus mascotas registradas
      </p>
    </div>

    <!-- Add New Pet Section -->
    <div id="divBotonRegistroMascota" class="mb-12 flex flex-col items-center ">
      <div class="bg-white rounded-xl p-8 text-center  shadow-xl/20 hover:shadow-lg/35 hover:scale-101 transition-all duration-200">
        <div class="flex items-center justify-center w-16 h-16 bg-primary rounded-full mx-auto mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
        </div>
        <h3 class="text-lg font-semibold text-gray-900 mb-2">¿Tu primera mascota?</h3>
        <p class="text-gray-500 mb-6">Registra una nueva mascota y genera su código QR único</p>
        <a href="/registro-mascota" 
           id="botonNuevaMascota"
           class="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary hover:bg-primary-dark transition-all duration-300 transform hover:scale-105">
          Añadir Nueva Mascota
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
          </svg>
        </a>
      </div>
    </div>

    <!-- Pets Container -->
    <div id="mascota-container" class="grid gap-8 grid-cols-1 md:grid-cols-2 lg:grid-cols-3">
      <!-- Las mascotas se cargarán aquí dinámicamente -->
    </div>
  </div>
</section>

<Modal title='Aviso:' />

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mascotasContainer: HTMLElement | null = document.getElementById('mascota-container');

    if (!mascotasContainer) {
      console.error("No se encontró el contenedor de mascotas");
      return;
    }

    async function fetchMascotaProfile() {
      try {
        const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/mi_mascota`, {
          method: "GET",
          credentials: "include",
          headers: {
            'Accept': 'application/json',
          }
        });
        const data = await response.json();

        if (response.ok && data.status === "success") {
          const mascotas = data.mascota;
          console.log("Datos de mascota cargados:", mascotas);
          
          // Limpiar contenedor
          mascotasContainer.innerHTML = '';

          // Si hay mascotas, crear las tarjetas
          if (mascotas && mascotas.length > 0) {
            mascotas.forEach(mascota => {
              const mascotaDiv = document.createElement('div');
              mascotaDiv.id = `mascota-${mascota.id}`;
              mascotaDiv.className = 'bg-white rounded-xl  shadow-xl/20 border border-gray-100 hover:shadow-lg/30 hover:scale-101 transition-all duration-200 overflow-hidden  shadow-xl/20';
              
              mascotaDiv.innerHTML = `
                <!-- Imagen de la mascota -->
                <div class="relative aspect-5/4">
                  ${mascota.foto ? 
                    `<img src="${import.meta.env.PUBLIC_API_URL}/uploads/mascotas/${mascota.foto}" 
                          alt="Foto de ${mascota.nombre}" 
                          class="w-full h-full object-cover" />` 
                    : 
                    `<div class="w-full h-full flex items-center justify-center">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                    </div>`
                  }
                  <div class="absolute top-4 right-4">
                    <span class="bg-white/90 backdrop-blur-sm text-primary font-semibold px-3 py-1 rounded-full text-sm">
                      ${mascota.nombre}
                    </span>
                  </div>
                </div>

                <!-- Contenido de la tarjeta -->
                <div class="p-6">
                  <h3 class="text-2xl font-bold text-gray-900 mb-4">${mascota.nombre}</h3>
                  
                  <div class="space-y-3 mb-6">
                    <div class="flex items-center text-sm text-gray-600">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                      </svg>
                      <strong>Chip: </strong> ${mascota.num_chip || 'No especificado'}
                    </div>
                    <div class="flex items-start text-sm text-gray-600">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 mt-0.5 text-primary flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h7" />
                      </svg>
                      <div>
                        <strong>Observaciones: </strong><br>
                        <span class="text-gray-500">${mascota.observaciones || 'No especificado'}</span>
                      </div>
                    </div>
                  </div>

                  <!-- Código QR -->
                  ${mascota.qr ? 
                    `<div class="bg-slate-100 rounded-lg p-4 text-center mb-6">
                      <img src="${mascota.qr.imgQr}" 
                            alt="QR de ${mascota.nombre}" 
                            class="w-24 h-24 mx-auto mb-3 border rounded" />
                      <a href="${mascota.qr.imgQr}" 
                        download="QR_${mascota.nombre}.png"
                        class="inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-primary border border-primary rounded-md hover:bg-primary hover:text-white transition-all duration-300">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Descargar
                      </a>
                    </div>` 
                    : 
                    `<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-center mb-6">
                      <p class="text-yellow-800 text-sm mb-2">QR no disponible</p>
                      <button id="generarQR${mascota.id}" 
                              class="inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-yellow-700 border border-yellow-300 rounded-md hover:bg-yellow-100 transition-all duration-300">
                        Generar QR
                      </button>
                    </div>`
                  }

                  <!-- Botones de acción -->
                  <div class="flex gap-3">
                    <button id="botonEditarMascota${mascota.id}"
                            class="flex-1 inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-all duration-300">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                      </svg>
                      Editar
                    </button>
                    <button id="botonEliminarMascota${mascota.id}"
                            class="flex-1 inline-flex items-center justify-center px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 transition-all duration-300">
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                      Eliminar
                    </button>
                  </div>
                </div>
              `;

              mascotasContainer.appendChild(mascotaDiv);

              // Event listeners
              const botonEliminarMascota = document.getElementById(`botonEliminarMascota${mascota.id}`);
              const botonEditarMascota = document.getElementById(`botonEditarMascota${mascota.id}`);
              
              botonEliminarMascota?.addEventListener('click', () => eliminarPerfilMascota(parseInt(`${mascota.id}`)));
              botonEditarMascota?.addEventListener('click', () => {  
                window.location.href = `/editar-mascota/${mascota.id}`; 
              });
            });
          } else {
            // No hay mascotas
            mascotasContainer.innerHTML = `
              <div class="col-span-full text-center py-12">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                </svg>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No tienes mascotas registradas</h3>
                <p class="text-gray-500">Registra tu primera mascota para comenzar</p>
              </div>
            `;
          }
        } else {
          const mensajeError = data.message || `Error desconocido de la API (Status: ${response.status})`;
          console.error("Datos recibidos:", data); 
          mascotasContainer.innerHTML = `
            <div class="col-span-full text-center py-12">
              <div class="bg-red-50 border border-red-200 rounded-lg p-6">
                <p class="text-red-800">Error: ${mensajeError}</p>
              </div>
            </div>
          `;
        }
      } catch (error) {
        console.error("Error de red durante el fetch:", error);
        mascotasContainer.innerHTML = `
          <div class="col-span-full text-center py-12">
            <div class="bg-red-50 border border-red-200 rounded-lg p-6">
              <p class="text-red-800">Error de red al conectar con la API.</p>
            </div>
          </div>
        `;
      }
    }

    fetchMascotaProfile();

    async function eliminarPerfilMascota(id: number) {
      window.showModal({
        message: "¿Estás seguro de que deseas eliminar este perfil? Esta acción no se puede deshacer.",
        onConfirm: async () => {
          try {
            const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/mi_mascota_eliminar/${id}`, {
              method: 'DELETE',
              credentials: 'include',
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              }
            });

            const data = await response.json();
            console.log("Respuesta eliminación:", data);
            
            if (data.status === "success") {
              fetchMascotaProfile();
              window.showModal({
                message: "Mascota eliminada correctamente",
                onConfirm: () => {
                  window.location.href = "/mi-perfil";
                }
              });
            } else {
              window.showModal({
                message: `Error al eliminar el perfil de mascota: ${data.mensaje || 'Error desconocido'}`,
                onConfirm: () => {
                  window.location.href = "/mi-perfil";
                }
              });
            }
          } catch (error) {
            console.error("Error al eliminar el perfil de mascota:", error);
            window.showModal({
              message: "Error de conexión al intentar eliminar el perfil de mascota",
              onConfirm: () => {
                window.location.href = "/mi-perfil";
              }
            });
          }
        }
      });
    }
  });
</script>


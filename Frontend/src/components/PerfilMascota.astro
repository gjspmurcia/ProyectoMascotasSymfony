---
import Modal from './Modal.astro';
---

<div>
    <div id="mascota-container" class="p-2 text-center rounded">
        <h2>Mis mascotas</h2>
        <div id="divBotonRegistroMascota" class="flex flex-row justify-center items-center gap-4">
            <p><strong>Añadir nueva mascota</strong></p>
            <a class="m-4 hover:text-slate-900 bg-teal-600 text-white font-bold px-4 py-2 rounded" href='/registro-mascota' id="botonNuevaMascota">Añadir</a>
        </div>
    </div>
</div>
  
<Modal title='Aviso:' />

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const divRegistroMascota = document.getElementById('divRegistroMascota');

      //  Obtener el elemento contenedor en el DOM
      const mascotasContainer: HTMLElement | null = document.getElementById('mascota-container');

      if (!mascotasContainer) {
      console.error("No se encontró el contenedor de mascotas");
      return;
    }

      //  Función asíncrona para obtener los datos
      async function fetchMascotaProfile() {
        try {
          const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/mi_mascota`, {
            method: "GET",
            credentials: "include",
            headers: {
                'Accept': 'application/json',
            }
          });
          const data = await response.json();
    
          //  Verificar el estado de la respuesta y el status de la API
          if (response.ok && data.status === "success") {
            const mascotas = data.mascota;
            console.log("Datos de mascota cargados:", mascotas);
            // Preservar el botón de añadir mascota
      const botonContainer = document.getElementById('divBotonRegistroMascota');
      const botonHTML = botonContainer?.innerHTML || '';
           // Limpiar y recrear estructura
      mascotasContainer.innerHTML = `
        <h2>Mis mascotas</h2>
        <div id="divBotonRegistroMascota" class="flex flex-row justify-center items-center gap-4">
          ${botonHTML}
        </div>
      `;
    
            // 5. Si es exitoso, construir e inyectar el HTML con los datos
            mascotas.forEach(mascota => {
            if (mascotasContainer) {
              const mascotaDiv = document.createElement('div');
              mascotaDiv.id = `mascota-${mascota.id}`;
              mascotaDiv.className = 'p-4 m-4 border rounded shadow';
              mascotaDiv.innerHTML = `
                <div>
                    <h1>${mascota.nombre}</h1>
                    <p><strong>No. Chip:</strong> ${mascota.num_chip || 'No especificado'}</p>
                    <p><strong>Observaciones:</strong> ${mascota.observaciones || 'No especificado'}</p>
                    <p><strong>Foto:</strong> ${mascota.foto || 'No especificado'}</p>
                    ${mascota.foto ? 
                      `<div class="my-3">
                        <img src="${import.meta.env.PUBLIC_API_URL}/uploads/mascotas/${mascota.foto}" 
                              alt="Foto de ${mascota.nombre}" 
                              class="w-48 h-48 object-cover rounded mx-auto" />
                      </div>` 
                      : 
                      `<p class="my-2 text-gray-500">No hay foto disponible</p>`
                    }
                    <!-- Mostrar el código QR -->
                        ${mascota.qr ? 
                          `<div class="my-3">
                            <h3 class="font-semibold mb-2">Código QR:</h3>
                            <img src="${mascota.qr.imgQr}" 
                                  alt="QR de ${mascota.nombre}" 
                                  class="w-32 h-32 object-cover rounded mx-auto" />
                            <div class="mt-2 text-center">
                              <a href="${mascota.qr.imgQr}" 
                                download="QR_${mascota.nombre}.png"
                                class="bg-teal-600 hover:bg-teal-800 text-white text-sm px-3 py-1 rounded">
                                Descargar QR
                              </a>
                            </div>
                          </div>` 
                          : 
                          `<div class="my-2 text-gray-500">
                            <p>No hay código QR disponible</p>
                            <button id="generarQR${mascota.id}" class="bg-teal-600 hover:bg-teal-800 text-white text-sm px-3 py-1 rounded mt-1">
                              Generar QR
                            </button>
                          </div>`
                        }
                    <br>
                    <button id="botonEditarMascota${mascota.id}">Editar</button>
                    <button id="botonEliminarMascota${mascota.id}" class="warning">Eliminar</button>
                </div>
              `;

            mascotasContainer.appendChild(mascotaDiv);

            
            const botonEliminarMascota = document.getElementById(`botonEliminarMascota${mascota.id}`);
            console.log("botonEliminarMascota:", botonEliminarMascota);
            const botonEditarMascota = document.getElementById(`botonEditarMascota${mascota.id}`);
            botonEliminarMascota?.addEventListener('click', () => eliminarPerfilMascota(parseInt(`${mascota.id}`)));
            botonEditarMascota?.addEventListener('click', () => {  window.location.href = `/editar-mascota/${mascota.id}`; });
            }
            });
          } else {

            // Si no hay usuario autenticado
          //   if (response.status === 401) {
          //     mascotaContainer.innerHTML = `<p>El usuario no esta autenticado (Status: ${response.status})</p>`;
          //   } else {
            
            //  Si hay un error de la API 
            const mensajeError = data.message || `Error desconocido de la API (Status: ${response.status})`;
            console.error("Datos recibidos:", data); 
            mascotasContainer.textContent = `Error: ${mensajeError}`;}
          // }
          
        } catch (error) {
          //  Si hay un error de red o cualquier otra excepción durante el fetch
          console.error("Error de red durante el fetch:", error);
          mascotasContainer.textContent = "Error de red al conectar con la API.";
        }
      }

    
      //  Llamar a la función para iniciar la carga de datos cuando el script se ejecuta
      fetchMascotaProfile();
    

      async function eliminarPerfilMascota(id: number) {

        window.showModal({
          message: "¿Estás seguro de que deseas eliminar este perfil? Esta acción no se puede deshacer.",
          onConfirm: async () => {

            try {
              const response = await fetch(`${import.meta.env.PUBLIC_API_URL}/api/mi_mascota_eliminar/${id}`, {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json'
                }
              });

              const data = await response.json();
              console.log("Respuesta eliminación:", data);
              if ( data.status === "success") {
                fetchMascotaProfile();

                window.showModal({
                message: "Mascota eliminada correctamente",
                onConfirm: () => {
                  window.location.href = "/mi-perfil";
                }
                });
              } else {
                window.showModal({
                message: `Error al eliminar el perfil de mascota: ${data.mensaje || 'Error desconocido'}`,
                onConfirm: () => {
                  window.location.href = "/mi-perfil";
                }
                });
              }
            } catch (error) {
              console.error("Error al eliminar el perfil de mascota:", error);
              window.showModal({
                message: "Error de conexión al intentar eliminar el perfil de mascota",
                onConfirm: () => {
                  window.location.href = "/mi-perfil";
                }
              });
            }
          }
        });
      }
});

</script>

